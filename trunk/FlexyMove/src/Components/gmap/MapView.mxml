<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:rtc="http://ns.adobe.com/rtc"
		 xmlns:maps="com.google.maps.*"
		 xmlns:gmap="Components.gmap.*"
		 creationComplete="creationCompleteHandler(event)"
		 width="100%" height="100%">
	
	<fx:Script>
		<![CDATA[
			import Components.gmap.core.SharedMarker;
			import Components.gmap.core.VideoVO;
			
			import com.adobe.rtc.events.AuthenticationEvent;
			import com.flexymove.MarkerManager;
			import com.google.maps.InfoWindowOptions;
			import com.google.maps.LatLng;
			import com.google.maps.MapEvent;
			import com.google.maps.MapMouseEvent;
			import com.google.maps.MapType;
			import com.google.maps.View;
			import com.google.maps.controls.MapTypeControl;
			import com.google.maps.controls.NavigationControl;
			import com.google.maps.overlays.Marker;
			import com.google.maps.services.ClientGeocoder;
			import com.google.maps.services.GeocodingEvent;
			import com.google.maps.services.Placemark;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import spark.components.BorderContainer;
			import spark.components.Label;
			
			private var markerManager:MarkerManager;
			
			public function onMapReady(event:MapEvent):void 
			{
				markerManager = new MarkerManager(map, LCConnectManager);
				
				map.setCenter(new LatLng(48.833, 2.333), 5, MapType.SATELLITE_MAP_TYPE);
				map.viewMode = View.VIEWMODE_ORTHOGONAL;
				map.addEventListener(MapMouseEvent.CLICK, mapClicked);
				map.enableScrollWheelZoom();
				map.enableContinuousZoom();
				map.enableControlByKeyboard();
				map.addControl(new NavigationControl());
				map.addControl(new MapTypeControl());
			}
			
			public function onClickOnMarker(event:MapMouseEvent):void
			{
				showInfoMarker(Marker(event.currentTarget));
			}
			
			public function mapClicked(event:MapMouseEvent):void
			{
				var latLng:LatLng = event.latLng;
				var videoInfos:VideoVO = new VideoVO();
				videoInfos.author = "raphi";
				videoInfos.lat = latLng.lat();
				videoInfos.lng = latLng.lng();
				var marker:SharedMarker = new SharedMarker(latLng, videoInfos);
				
				// ------------------- Shit to change --------------------
				var label:Label = new Label();
				label.text = "Latitude : " + marker.getLatLng().lat().toFixed(2) + "\nLongitude" + marker.getLatLng().lng().toFixed(2);;
				label.y = 5;
				var item:BorderContainer = new BorderContainer();
				item.width = 230;
				item.height = 32;
				item.styleDeclaration = new CSSStyleDeclaration();
				item.styleDeclaration.setStyle("borderWeight", "1");
				item.styleDeclaration.setStyle("cornerRadius", "5");
				item.addElement(label);
				panelInfo.markerList.addElement(item);
				// ------------------- End of shit --------------------
				
				marker.addEventListener(MapMouseEvent.CLICK, onClickOnMarker);
				
				//map.addOverlay(marker); WHAT FOR??
				markerManager.addMarker(marker);
				showInfoMarker(marker);
			}
			
			public function showInfoMarker(marker:Marker):void
			{
				var place:Placemark = new Placemark();
				var geocodingreq:GeocodingEvent = new GeocodingEvent("geocode");
				
				var geocoder:ClientGeocoder = new ClientGeocoder();
				
				panelInfo.latlng.text = "Latitude : " + marker.getLatLng().lat().toFixed(2) + "\nLongitude : " + marker.getLatLng().lng().toFixed(2);
				geocoder.addEventListener(
					GeocodingEvent.GEOCODING_SUCCESS,
					function(event:GeocodingEvent):void
					{
						var placemarks:Array = event.response.placemarks;
						if (placemarks.length > 0)
						{
							var place:Placemark = placemarks[0];
							panelInfo.adress.text = place.address;
						}
					});
				geocoder.addEventListener(
					GeocodingEvent.GEOCODING_FAILURE,
					function(event:GeocodingEvent):void
					{
						panelInfo.adress.text = "Sorry we can't locate this position. Try again";
					});
				geocoder.reverseGeocode(marker.getLatLng());
				
				var vm:VideoMarker = new VideoMarker();
				marker.openInfoWindow(new InfoWindowOptions({customContent:vm,width:200,height:100, drawDefaultFrame:true}));
			}
			
			private function authenticationSuccessHandler(event:AuthenticationEvent):void
			{
				Alert.show("Login success");
			}
			
			private function authenticationFailureHandler(event:AuthenticationEvent):void
			{
				Alert.show("Login fail");
			}
			
			private function creationCompleteHandler(event:FlexEvent):void
			{
				LCConnectManager.login();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<rtc:ConnectSession id="LCConnectManager" roomURL="https://collaboration.adobelivecycle.com/flexymove/sharedvideos">
			<rtc:authenticator>
				<rtc:AdobeHSAuthenticator userName="flexymove@googlegroups.com" password="flexymovepowa" 
										  authenticationFailure="authenticationFailureHandler(event)"
										  authenticationSuccess="authenticationSuccessHandler(event)">
				</rtc:AdobeHSAuthenticator>
			</rtc:authenticator>
		</rtc:ConnectSession>
	</fx:Declarations>
	
	<maps:Map3D id="map"
				width="100%" height="100%" 
				key="ABQIAAAApevjLsy0a4ChuZ1lcd50AhTsslF4Y8xkhf7W8wmKT7ADz-aLqhRgYJNmWAMy90YGUU-Zs8_XupF7fQ"
				url="http://asme.fr"
				mapevent_mapready="onMapReady(event)"
				sensor="false">
	</maps:Map3D>
	<!--<gmap:userInfo />-->
	<gmap:PanelInfo id="panelInfo" />
</s:Group>
