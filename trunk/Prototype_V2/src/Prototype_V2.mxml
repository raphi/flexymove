<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   minWidth="1024" minHeight="600">
	
	<fx:Script>
		<![CDATA[
			import Algorithme.alpha;
			import Algorithme.beta;
			
			import mx.charts.chartClasses.StackedSeries;
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.graphics.codec.PNGEncoder;
			import mx.managers.CursorManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			[Bindable]
			public var w:int = 340;
			public var h:int = 3*w/4;
			public var f:int = 25;
			public var timer:Timer = new Timer(1000/f, 0);
			public var drawBitmap:Bitmap = null;
			public var detectedPoint:Point = new Point(-1, -1);
			public var algos:Array = new Array(new Algorithme.alpha(), new Algorithme.beta());
			public var taille:int = 10;
			//public var tailleRef:int = -1;
			public var prevBitmap:Bitmap = null;
			//public var prevCenterx:int = -1;
			//public var prevCentery:int = -1;

			private function loadCamera () : void
			{
				var camera:Camera = Camera.getCamera();
				if (camera)
				{
					var ip:ImageProcessing = null;
					((Algorithme.algorithme)(algos[0])).w = w;
					((Algorithme.algorithme)(algos[0])).h = h;
					((Algorithme.algorithme)(algos[1])).w = w;
					((Algorithme.algorithme)(algos[1])).h = h;
					var i:int = 0;
					var j:int = 0;
					var rgb:int = 0;
					camera.setMode(w, h, f, true);
					videoCamera.attachCamera(camera);
					timer.addEventListener("timer", takeSnapshot);
					timer.start();
				}
				else
				{
					Alert.show("pas de webcam.");
				}
				drawBitmap = new Bitmap(new BitmapData(w, h, false, 0xFFFFFF))
				componentMoved.addChild(drawBitmap);
			}
			private function takeSnapshot(e:String) : void
			{
				var snapshot:BitmapData = new BitmapData(w, h, true);
				snapshot.draw(videoCamera);

				//REVERSE IMAGE
				var i:int = 0;
				var j:int = 0;
				var rgb:int = 0;
				if (check_swap.selected)
				{
					for (i = 0; i < w / 2; i++)
					{
						for (j = 0; j < h; j++)
						{
							rgb = snapshot.getPixel(i, j);
							snapshot.setPixel(i, j, snapshot.getPixel(w - i, j));
							snapshot.setPixel(w - i, j, rgb);
						}
					}
				}
				//END OF REVERSE IMAGE
				
				var snapshotSave:BitmapData = new BitmapData(w, h, true);
				if (prevBitmap)
				{
					/*if (check_algo_plus.selected)
					{
						for (i = 0; i < w; i++)
						{
							for (j = 0; j < h; j++)
							{
								var RGB:int = snapshotColor.getPixel(i, j); 
								var RGB2:int = prevBitmap.bitmapData.getPixel(i, j); 
								RGB = RGB + 16777216;
								RGB2 = RGB2 + 16777216; 
								var a:int = ImageProcessing.getR(RGB);
								var b:int = ImageProcessing.getG(RGB);
								var c:int = ImageProcessing.getB(RGB);
								var d:int = ImageProcessing.getR(RGB2);
								var ee:int = ImageProcessing.getG(RGB2);
								var f:int = ImageProcessing.getB(RGB2);
								
								if (Math.abs((a+b+c)/3 - (d+ee+f)/3) < 20)
								{
									snapshotColor.setPixel(i, j, 0);
								}
							}
						}
					}*/
				}
				snapshotSave.draw(snapshot);
				prevBitmap = new Bitmap(snapshotSave);
				if (!check_no_algo.selected)
				{
					processImage(snapshot);
				}

				//snapshotMove = snapshotMove.compare(prevBitmap.bitmapData) as BitmapData;
				// CODE INTERNET
				//var rect:Rectangle = new Rectangle(0, 0, w, h);
				//var pt:Point = new Point(0, 0);
				
				//snapshotMove.draw(prevBitmap.bitmapData, new Matrix(), new ColorTransform(), 'subtract');
				//snapshotMove.threshold(snapshotMove, rect, pt, '>', 0xff111111, 0xffffffff);
				
				//END OF CODE INTERNET
				//componentMoved.addChild(new Bitmap(snapshotMove));
				var snapshotBitmap:Bitmap = new Bitmap(snapshot);
				component.addChild(snapshotBitmap);
				//savePicture(snapshot);
			}
			private function clickButton() : void
			{
				//tailleRef = taille;
			}
			private function eraseScreen() : void
			{
				componentMoved.removeChild(drawBitmap);
				drawBitmap = new Bitmap(new BitmapData(w, h, false, 0xFFFFFF));
				componentMoved.addChild(drawBitmap);
			}

			private function processImage(img:BitmapData) : void
			{
				//prevCenterx = point.x;
				//prevCentery = point.y;
				//taille = 0;
				//point.x = 0;
				//point.y = 0;
				var algo:Algorithme.algorithme;
				if (check_algo.selected)
				{
					algo = (Algorithme.algorithme)(algos[0]); 
				}
				else
				{
					algo = (Algorithme.algorithme)(algos[1]);
				}
				if (algo == null)
				{
					Alert.show("null valu algo");
				}
				algo.r_min = r_min.value;
				algo.r_max = r_max.value;
				algo.g_min = g_min.value;
				algo.g_max = g_max.value;
				algo.b_min = b_min.value;
				algo.b_max = b_max.value;
				detectedPoint = algo.ProcessImage(img);

				var v:int = 5;
				detectedPoint.x = v * ((int)(detectedPoint.x / v)); 
				detectedPoint.y = v * ((int)(detectedPoint.y / v));
				ImageProcessing.drawLines(img,detectedPoint.x, detectedPoint.y,0); 
				
				
				/*if ((tailleRef != -1) && (taille > 1.3*tailleRef))
				{
					if ((prevCenterx > 0) && (point.x > 0))
					{
						ImageProcessing.drawLine(drawBitmap.bitmapData, prevCenterx, prevCentery, point.x, point.y, 255*256*256);
					}
					ImageProcessing.drawLines(img, point.x, point.y, 255*256*256);
				}
				else
				{
					ImageProcessing.drawLines(img, point.x, point.y, 255*256*256 + 255);
					prevCenterx = -1;
					prevCentery = -1;
				}
				*/
			}

			
			// ----------------------------------  DRAG N DROP PART  -----------------------------------------------------
			
			//Import classes so you don't have to use full names.
			import mx.managers.DragManager;
			import mx.core.DragSource;
			import mx.events.DragEvent;
			import flash.events.MouseEvent;
			
			// Embed icon image.
			[Embed(source='assets/postit.png')]
			public var postItImage:Class;
			
			// The mouseMove event handler for the Image control
			// initiates the drag-and-drop operation.
			private function mouseMoveHandler(event:MouseEvent):void 
			{                
				var dragInitiator:Image = Image(event.currentTarget);
				var ds:DragSource = new DragSource();
				ds.addData(dragInitiator, "img");               
				
				DragManager.doDrag(dragInitiator, ds, event);
			}
			
			// The dragEnter event handler for the Canvas container
			// enables dropping.
			private function dragEnterHandler(event:DragEvent):void {
				if (event.dragSource.hasFormat("img"))
				{
					DragManager.acceptDragDrop(Canvas(event.currentTarget));
				}
			}
			
			// The dragDrop event handler for the Canvas container
			// sets the Image control's position by 
			// "dropping" it in its new location.
			private function dragDropHandler(event:DragEvent):void {
				Image(event.dragInitiator).x = 
					Canvas(event.currentTarget).mouseX;
				Image(event.dragInitiator).y = 
					Canvas(event.currentTarget).mouseY;
			}

		]]>
	</fx:Script>

	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	
		<s:HGroup>
			<s:VGroup width="100%" height="100%">
				<s:Label text="RED"/>
				<s:HSlider id="r_min" minimum="0" maximum="256" liveDragging="true" value="0"/>
				<s:HSlider id="r_max" minimum="0" maximum="256" liveDragging="true" value="58"/>
			</s:VGroup>
			<s:VGroup width="100%" height="100%">
				<s:Label text="GREEN"/>
				<s:HSlider id="g_min" minimum="0" maximum="256" liveDragging="true" value="52"/>
				<s:HSlider id="g_max" minimum="0" maximum="256" liveDragging="true" value="164"/>
			</s:VGroup>
			<s:VGroup width="100%" height="100%">
				<s:Label text="BLUE"/>
				<s:HSlider id="b_min" minimum="0" maximum="256" liveDragging="true" value="150"/>
 				<s:HSlider id="b_max" minimum="0" maximum="256" liveDragging="true" value="256"/>
			</s:VGroup>
		</s:HGroup>
		<s:HGroup width="100%">
			<s:Panel title="Votre webcam" visible="false" width="0" height="0">
				<mx:VideoDisplay
					id="videoCamera"
					creationComplete="loadCamera();"
					width="{w}"
					height="{h}"/>
			</s:Panel>
			<s:VGroup width="100%" height="100%">
				<s:Label text="Profondeur: {taille}"/>
				<s:Button
					id="buttonBegin"
					label="Commencer"
					click="clickButton();"
					/>
				<s:Button
					id="buttonErase"
					label="Erase"
					click="eraseScreen();"
					/>
				<s:CheckBox
					id="check_swap"
					label="swap"
					/>
				<s:CheckBox
					id="check_no_algo"
					label="pas d'algorithme"
					/>
				<s:CheckBox
					id="check_algo"
					label="algo par group"
					/>
				<s:CheckBox
					id="check_algo_plus"
					label="algo complÃ©mentaire"
					/>
			</s:VGroup>
		</s:HGroup>
		<s:HGroup width="100%">
			<s:Panel title="Detection de la couleur">
				<mx:UIComponent
					id="component"
					width="{w}"
					height="{h}"/>
			</s:Panel>
			<s:Panel title="Detection des mouvements">
				<mx:UIComponent
					id="componentMoved"
					width="{w}"
					height="{h}"/>
			</s:Panel>
		</s:HGroup>
	
	<!-- The Canvas is the drag target --> 
	<mx:Canvas id="v1" 
			   width="100%" height="500"  
			   borderStyle="solid" 
			   backgroundColor="#FFFE11"
			   dragEnter="dragEnterHandler(event);" 
			   dragDrop="dragDropHandler(event);">
		
		<!-- The image is the drag initiator. -->
		<mx:Image id="myimg" 
				  source="@Embed(source='assets/postit.png')" 
				  mouseMove="mouseMoveHandler(event);"/> 
	</mx:Canvas>
</s:Application>
