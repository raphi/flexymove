<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   minWidth="1024" minHeight="600">
	
	<fx:Script>
		<![CDATA[
			import Algorithme.alpha;
			import Algorithme.beta;
			
			import mx.charts.chartClasses.StackedSeries;
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.graphics.codec.PNGEncoder;
			import mx.managers.CursorManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			public var w:int = 600;
			public var h:int = 3*w/4;
			public var f:int = 40;
			public var timer:Timer = new Timer(1000/f, 0);
			public var drawBitmap:Bitmap = null;
			public var detectedPoint:Point = new Point(-1, -1);
			public var algos:Array = new Array(new Algorithme.alpha(), new Algorithme.beta());
			[Bindable]
			public var taille:int = 0;
			public var tailleRef:int = -1;
			public var prevBitmap:Bitmap = null;
			public var positions:ArrayCollection = new ArrayCollection();// array of Point()
			public var tailles:ArrayCollection = new ArrayCollection();// array of int
			public var nFrame:int = -1; 
			public var prevCenterx:int = -1;
			public var prevCentery:int = -1;
			public var handle:Boolean = false;
			
			private function loadCamera () : void
			{
				var camera:Camera = Camera.getCamera();
				if (camera)
				{
					((Algorithme.algorithme)(algos[0])).w = w;
					((Algorithme.algorithme)(algos[0])).h = h;
					((Algorithme.algorithme)(algos[1])).w = w;
					((Algorithme.algorithme)(algos[1])).h = h;
					//var i:int = 0;
					//var j:int = 0;
					//var rgb:int = 0;
					camera.setMode(w, h, f, true);
					videoCamera.attachCamera(camera);
				}
				else
				{
					//Alert.show("pas de webcam.");
					var p:Point;
					var i:int;
					var j:int;
					for (i = 0; i < 100; i++)
					{
						p = new Point(10 + 2 * i, 10 + 2 * i);
						positions.addItem(p);
						tailles.addItem(10);
					}
					nFrame = 0;
				}
				timer.addEventListener("timer", takeSnapshot);
				timer.start();
				drawBitmap = new Bitmap(new BitmapData(w, h, false, 0xFFFFFF))
				componentDraw.addChild(drawBitmap);
			}
			private function takeSnapshot(e:String) : void
			{
				var snapshot:BitmapData = new BitmapData(w, h, true);
				if (nFrame == -1)
				{
					snapshot.draw(videoCamera);
				}					
				//REVERSE IMAGE
				var i:int = 0;
				var j:int = 0;
				var rgb:int = 0;
				if (check_swap.selected)
				{
					for (i = 0; i < w / 2; i++)
					{
						for (j = 0; j < h; j++)
						{
							rgb = snapshot.getPixel(i, j);
							snapshot.setPixel(i, j, snapshot.getPixel(w - i, j));
							snapshot.setPixel(w - i, j, rgb);
						}
					}
				}
				//END OF REVERSE IMAGE
				
				if (prevBitmap)
				{
					/*if (check_algo_plus.selected)
					{
					for (i = 0; i < w; i++)
					{
					for (j = 0; j < h; j++)
					{
					var RGB:int = snapshotColor.getPixel(i, j); 
					var RGB2:int = prevBitmap.bitmapData.getPixel(i, j); 
					RGB = RGB + 16777216;
					RGB2 = RGB2 + 16777216; 
					var a:int = ImageProcessing.getR(RGB);
					var b:int = ImageProcessing.getG(RGB);
					var c:int = ImageProcessing.getB(RGB);
					var d:int = ImageProcessing.getR(RGB2);
					var ee:int = ImageProcessing.getG(RGB2);
					var f:int = ImageProcessing.getB(RGB2);
					
					if (Math.abs((a+b+c)/3 - (d+ee+f)/3) < 20)
					{
					snapshotColor.setPixel(i, j, 0);
					}
					}
					}
					}*/
				}
				//var snapshotSave:BitmapData = new BitmapData(w, h, true);
				//snapshotSave.draw(snapshot);
				prevBitmap = new Bitmap(snapshot);
				prevCenterx = detectedPoint.x;
				prevCentery = detectedPoint.y;
				detectedPoint.x = -1;
				detectedPoint.y = -1;
				if (!check_no_algo.selected)
				{
					detectedPoint = processImage(snapshot);
					if ((prevCenterx >= 0) && (detectedPoint.x >= 0))
					{
						if (Math.abs(detectedPoint.x - prevCenterx) < stabilizer.value)
							detectedPoint.x = prevCenterx;
						if (Math.abs(detectedPoint.y - prevCentery) < stabilizer.value)
							detectedPoint.y = prevCentery;
						myviseur.x = (detectedPoint.x / w * v1.width)- myviseur.width / 2;  
						myviseur.y = (detectedPoint.y / h * v1.height) - myviseur.height / 2;
					}
					ImageProcessing.drawLines(snapshot, detectedPoint.x, detectedPoint.y, 0); 
					if ((tailleRef != -1) && (taille > (coef.value / 10) * tailleRef))
					{
						if ((prevCenterx >= 0) && (detectedPoint.x >= 0))
						{
							ImageProcessing.drawLine(drawBitmap.bitmapData, prevCenterx, prevCentery, detectedPoint.x, detectedPoint.y, 255*256*256);
							var nx:int = myimgBad.x + ((detectedPoint.x - prevCenterx) / w) * v1.width; 
							var ny:int = myimgBad.y + ((detectedPoint.y - prevCentery) / h) * v1.height;
							var x:int = (detectedPoint.x / w) * v1.width;
							var y:int = (detectedPoint.y / h) * v1.height;
							if (nx < x && x < nx + myimgBad.width && ny < y && y < ny + myimgBad.height)
							{
								myimgBad.x = Math.max(0, Math.min(nx, v1.width - myimgBad.width - 2));
								myimgBad.y = Math.max(0, Math.min(ny, v1.height - myimgBad.height - 2));
								myimgHappy.x = myimgBad.x;
								myimgHappy.y = myimgBad.y;
								if (handle == false)
								{
									handle = true;
									myimgBad.visible = false;
									myimgHappy.visible = true;
								}
							}
							//source="@Embed(source='assets/raphiBad.png')" 
						}
						ImageProcessing.drawLines(snapshot, detectedPoint.x, detectedPoint.y, 255*256*256);
					}
					else
					{
						if (handle == true)
						{
							handle = false;
							myimgBad.visible = true;
							myimgHappy.visible = false;
						}
						//myimg.source = "@Embed(source='assets/raphiBad.png')";
						ImageProcessing.drawLines(snapshot, detectedPoint.x, detectedPoint.y, 255*256*256 + 255);
						prevCenterx = -1;
						prevCentery = -1;
					}
					prevCenterx = detectedPoint.x;
					prevCentery = detectedPoint.y;
				}
				
				//snapshotMove = snapshotMove.compare(prevBitmap.bitmapData) as BitmapData;
				// CODE INTERNET
				//var rect:Rectangle = new Rectangle(0, 0, w, h);
				//var pt:Point = new Point(0, 0);
				
				//snapshotMove.draw(prevBitmap.bitmapData, new Matrix(), new ColorTransform(), 'subtract');
				//snapshotMove.threshold(snapshotMove, rect, pt, '>', 0xff111111, 0xffffffff);
				
				//END OF CODE INTERNET
				//componentMoved.addChild(new Bitmap(snapshotMove));
				//savePicture(snapshot);
				var snapshotBitmap:Bitmap = new Bitmap(snapshot);
				component.addChild(snapshotBitmap);
			}
			private function clickButton() : void
			{
				tailleRef = taille;
			}
			private function eraseScreen() : void
			{
				componentDraw.removeChild(drawBitmap);
				drawBitmap = new Bitmap(new BitmapData(w, h, false, 0xFFFFFF));
				componentDraw.addChild(drawBitmap);
			}
			
			private function processImage(img:BitmapData) : Point
			{
				if (nFrame != -1)
				{
					if (nFrame < positions.length)
					{
						var p:Point = positions[nFrame];
						if (nFrame == 0)
						{
							//emule click down
							//var event:MouseEvent = new MouseEvent(MouseEvent.MOUSE_DOWN);
							//event.
						}
						
						if (nFrame == positions.length - 1)
						{
							//emule click up
						}
						if ((prevCenterx > 0) && (p.x > 0))
						{
							ImageProcessing.drawLine(drawBitmap.bitmapData, prevCenterx, prevCentery, p.x, p.y, 255*256*256);
						}
						ImageProcessing.drawLines(img, p.x, p.y, 255*256*256);
						taille = 10;
						nFrame++;
						return p;
					}
				}
				else
				{
					var algo:Algorithme.algorithme;
					if (check_algo.selected)
					{
						algo = Algorithme.algorithme(algos[0]);
					}
					else
					{
						algo = Algorithme.algorithme(algos[1]);
					}
					if (algo == null)
					{
						Alert.show("null valu algo");
					}
					algo.r_min = r_min.value;
					algo.r_max = r_max.value;
					algo.g_min = g_min.value;
					algo.g_max = g_max.value;
					algo.b_min = b_min.value;
					algo.b_max = b_max.value;
					var res:Point = algo.ProcessImage(img);
					taille = algo.taille;
					return res;
				}
				return (new Point(-1, -1));
			}
			
			
			// ----------------------------------  DRAG N DROP PART  -----------------------------------------------------
			
			//Import classes so you don't have to use full names.
			import mx.managers.DragManager;
			import mx.core.DragSource;
			import mx.events.DragEvent;
			import flash.events.MouseEvent;
			
			// Embed icon image.
			[Embed(source='assets/postit.png')]
			public var postItImage:Class;
			
			// The mouseMove event handler for the Image control
			// initiates the drag-and-drop operation.
			private function mouseMoveHandler(event:MouseEvent):void 
			{                
				var dragInitiator:Image = Image(event.currentTarget);
				var ds:DragSource = new DragSource();
				ds.addData(dragInitiator, "img");               
				
				DragManager.doDrag(dragInitiator, ds, event);
			}
			
			// The dragEnter event handler for the Canvas container
			// enables dropping.
			private function dragEnterHandler(event:DragEvent):void {
				if (event.dragSource.hasFormat("img"))
				{
					DragManager.acceptDragDrop(Canvas(event.currentTarget));
				}
			}
			
			// The dragDrop event handler for the Canvas container
			// sets the Image control's position by 
			// "dropping" it in its new location.
			private function dragDropHandler(event:DragEvent):void {
				Image(event.dragInitiator).x = 
					Canvas(event.currentTarget).mouseX;
				Image(event.dragInitiator).y = 
					Canvas(event.currentTarget).mouseY;
			}
			
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	<s:HGroup height="100%" width="100%">
		<s:VGroup width="100%">
			<s:HGroup>
				<s:VGroup width="100%" height="100%">
					<s:Label text="RED"/>
					<s:HSlider id="r_min" minimum="0" maximum="256" liveDragging="true" value="0"/>
					<s:HSlider id="r_max" minimum="0" maximum="256" liveDragging="true" value="58"/>
					<!-- 0 to 58 -->
				</s:VGroup>
				<s:VGroup width="100%" height="100%">
					<s:Label text="GREEN"/>
					<s:HSlider id="g_min" minimum="0" maximum="256" liveDragging="true" value="0"/>
					<s:HSlider id="g_max" minimum="0" maximum="256" liveDragging="true" value="164"/>
					<!-- 52 to 164 -->
				</s:VGroup>
				<s:VGroup width="100%" height="100%">
					<s:Label text="BLUE"/>
					<s:HSlider id="b_min" minimum="0" maximum="256" liveDragging="true" value="80"/>
					<s:HSlider id="b_max" minimum="0" maximum="256" liveDragging="true" value="256"/>
					<!-- 150 to 256 -->
				</s:VGroup>
			</s:HGroup>
			<s:HGroup width="100%">
				<s:Panel title="Votre webcam" visible="false" width="0" height="0">
					<mx:VideoDisplay
						id="videoCamera"
						creationComplete="loadCamera();"
						width="{w}"
						height="{h}"/>
				</s:Panel>
				<s:VGroup>
					<s:HGroup width="100%" height="100%">
						<s:Label text="Profondeur: {taille}"/>
						<s:Button
							id="buttonBegin"
							label="Commencer"
							click="clickButton();"
							/>
						<s:Button
							id="buttonErase"
							label="Erase"
							click="eraseScreen();"
							/>
						<s:Button
							id="buttonReBegin"
							label="reCommencer"
							click="nFrame = 0;"
							/>
						<s:HSlider id="coef" minimum="1" maximum="30" liveDragging="true" value="13"/>
					</s:HGroup>
					<s:HGroup>
						<s:CheckBox
							id="check_swap"
							label="swap"
							/>
						<s:CheckBox
							id="check_no_algo"
							label="pas d'algorithme"
							/>
						<s:CheckBox
							id="check_algo"
							label="algo par group"
							/>
						<s:CheckBox
							id="check_algo_plus"
							label="algo complémentaire"
							/>
						<s:HSlider id="stabilizer" minimum="1" maximum="20" liveDragging="true" value="4"/>
					</s:HGroup>
				</s:VGroup>
			</s:HGroup>
			<s:Panel title="Detection de la couleur">
				<mx:UIComponent
					id="component"
					width="{w}"
					height="{h}"/>
			</s:Panel>
			<s:Panel title="Detection des mouvements">
				<mx:UIComponent
					id="componentDraw"
					width="{w}"
					visible="false"
					height="{h}"/>
			</s:Panel>
		</s:VGroup>
		<!-- The Canvas is the drag target --> 
		<mx:Canvas id="v1"
				   width="700" height="600"  
				   borderStyle="solid" 
				   backgroundColor="#FFFE11"
				   dragEnter="dragEnterHandler(event);" 
				   dragDrop="dragDropHandler(event);">
			
			<!-- The image is the drag initiator. -->
			<mx:Image id="myimgBad" 
					  source="@Embed(source='assets/raphiBad.png')" 
					  mouseMove="mouseMoveHandler(event);"/> 
			<mx:Image id="myimgHappy" 
					  source="@Embed(source='assets/raphiHappy.png')" 
					  mouseMove="mouseMoveHandler(event);"
					  visible="false" /> 
			<mx:Image id="myviseur" 
					  source="@Embed(source='assets/viseur.png')" 
					  mouseMove="mouseMoveHandler(event);"/> 
		</mx:Canvas>
	</s:HGroup>
	
</s:Application>
