<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   minWidth="1024" minHeight="600">
	
	<fx:Script>
		<![CDATA[
			import Algorithme.alpha;
			import Algorithme.beta;
			
			import flash.sampler.getMemberNames;
			
			import mx.charts.chartClasses.StackedSeries;
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.graphics.codec.PNGEncoder;
			import mx.managers.CursorManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			public var w:int = 300;
			[Bindable]
			public var h:int = 3*w/4;
			public var f:int = 25;
			public var timer:Timer = new Timer(1000/f, 0);
			public var detectedPoint:Point = new Point(-1, -1);
			public var algos:Array = new Array(new Algorithme.alpha(), new Algorithme.beta());
			[Bindable]
			public var time:int = 0;
			[Bindable]
			public var taille:int = 0;
			public var tailleRef:int = -1;
			public var prevBitmap:Bitmap = null;
			public var positions:ArrayCollection = new ArrayCollection();// array of Point()
			public var tailles:ArrayCollection = new ArrayCollection();// array of int
			// [EMULE_MVT] public var nFrame:int = -1; 
			public var prevCenterx:int = -1;
			public var prevCentery:int = -1;
			// gestion des carré cliquable
			public var objects:ArrayCollection = new ArrayCollection(); 
			public var handle:int = -1;  // ENUM pour image selectionnée
			
			private function loadCamera () : void
			{
				var camera:Camera = Camera.getCamera();
				if (camera)
				{
					Algorithme.algorithme(algos[0]).w = w;
					Algorithme.algorithme(algos[0]).h = h;
					Algorithme.algorithme(algos[0]).prepare();
					Algorithme.algorithme(algos[1]).w = w;
					Algorithme.algorithme(algos[1]).h = h;
					Algorithme.algorithme(algos[1]).prepare();
					camera.setMode(w, h, f, true);
					videoCamera.attachCamera(camera);
				}
				timer.addEventListener("timer", takeSnapshot);
				timer.start();
				
				var i:int = 0;
				while (i < 5)
				{
					var obj:Canvas = new Canvas();
					obj.x = i*80;
					obj.y = 200;
					obj.width = 70;
					obj.height = 70;
					obj.setStyle("backgroundColor", 0xff0000);
					v1.addChild(obj);
					objects.addItem(obj);
					i++;
				}
			objects.addItem(myimgBad);
			}
			private function takeSnapshot(e:String) : void
			{
				var t:int = (new Date()).getMilliseconds();
				var snapshot:BitmapData = new BitmapData(w, h, false);
				if (check_swap.selected)
				{
					var m:Matrix = new Matrix(-1, 0, 0, 1, w, 0);
					snapshot.draw(videoCamera, m);
				}
				else
				{
					snapshot.draw(videoCamera);

				}
				
				if (prevBitmap)
				{

					if (check_algo_plus.selected)
					{
						/*for (i = 0; i < w; i++)
						{
						for (j = 0; j < h; j++)
						{
						var RGB:int = snapshotColor.getPixel(i, j); 
						var RGB2:int = prevBitmap.bitmapData.getPixel(i, j); 
						RGB = RGB + 16777216;
						RGB2 = RGB2 + 16777216; 
						var a:int = ImageProcessing.getR(RGB);
						var b:int = ImageProcessing.getG(RGB);
						var c:int = ImageProcessing.getB(RGB);
						var d:int = ImageProcessing.getR(RGB2);
						var ee:int = ImageProcessing.getG(RGB2);
						var f:int = ImageProcessing.getB(RGB2);
						
						if (Math.abs((a+b+c)/3 - (d+ee+f)/3) < 20)
						{
						snapshotColor.setPixel(i, j, 0);
						}
						}
						}*/
					}

				}
				prevBitmap = new Bitmap(snapshot);
				prevCenterx = detectedPoint.x;
				prevCentery = detectedPoint.y;
				detectedPoint.x = -1;
				detectedPoint.y = -1;
				if (!check_no_algo.selected)
				{
					detectedPoint = processImage(snapshot);
					if ((prevCenterx >= 0) && (detectedPoint.x >= 0)) // si detection sur fram precedente et actuel
					{
						if (Math.abs(detectedPoint.x - prevCenterx) < stabilizer.value) // stabilisation
							detectedPoint.x = prevCenterx;
						if (Math.abs(detectedPoint.y - prevCentery) < stabilizer.value) // stabilisation
							detectedPoint.y = prevCentery;
						myviseur.x = (detectedPoint.x / w * v1.width)- myviseur.width / 2;  // deplacement viseur
						myviseur.y = (detectedPoint.y / h * v1.height) - myviseur.height / 2;
					}
					if ((tailleRef != -1) && (taille > (coef.value / 10) * tailleRef)) // si click (proche)
					{
						ImageProcessing.drawLines(snapshot, detectedPoint.x, detectedPoint.y, 255*256*256);
						if (handle == -1) //si rien est selectioné 	//begin drag and drop
						{
							var i:int = 0;
							while (i < objects.length)
							{
								var o:Canvas = objects[i] as Canvas;
								if (o.x < myviseur.x && myviseur.x < o.x + o.width && o.y < myviseur.y && myviseur.y < o.y + o.height)
								{
									handle = i;
									break;
								}								
								i++;
							}
						}
						else
						{
							if ((prevCenterx >= 0) && (detectedPoint.x >= 0))
							{
								var oo:Canvas = objects[handle] as Canvas;
								oo.x = oo.x + ((detectedPoint.x - prevCenterx) / w) * v1.width; 
								oo.y = oo.y + ((detectedPoint.y - prevCentery) / h) * v1.height;
							}
						}
						
					}
					else
					{
						ImageProcessing.drawLines(snapshot, detectedPoint.x, detectedPoint.y, 255*256*256 + 255*256 + 255);
						if (handle != -1)
						{
							//release drag and drop
							handle = -1;
						}
					}
					
					/*
					if ((tailleRef != -1) && (taille > (coef.value / 10) * tailleRef))
					{
					if ((prevCenterx >= 0) && (detectedPoint.x >= 0))
					{
					var nx:int = myimgBad.x + ((detectedPoint.x - prevCenterx) / w) * v1.width; 
					var ny:int = myimgBad.y + ((detectedPoint.y - prevCentery) / h) * v1.height;
					var x:int = (detectedPoint.x / w) * v1.width;
					var y:int = (detectedPoint.y / h) * v1.height;
					if (nx < x && x < nx + myimgBad.width && ny < y && y < ny + myimgBad.height)
					{
					myimgBad.x = Math.max(0, Math.min(nx, v1.width - myimgBad.width - 2));
					myimgBad.y = Math.max(0, Math.min(ny, v1.height - myimgBad.height - 2));
					myimgHappy.x = myimgBad.x;
					myimgHappy.y = myimgBad.y;
					if (handle == -1)
					{
					handle = 0;
					myimgBad.visible = false;
					myimgHappy.visible = true;
					}
					}
					//source="@Embed(source='assets/raphiBad.png')" 
					}
					ImageProcessing.drawLines(snapshot, detectedPoint.x, detectedPoint.y, 255*256*256 + 255*256 + 255);
					}
					else
					{
					if (handle != -1)
					{
					handle = -1;
					myimgBad.visible = true;
					myimgHappy.visible = false;
					}
					ImageProcessing.drawLines(snapshot, detectedPoint.x, detectedPoint.y, 0);
					prevCenterx = -1;
					prevCentery = -1;
					}
					//*/
				}
				
				//snapshotMove = snapshotMove.compare(prevBitmap.bitmapData) as BitmapData;
				// CODE INTERNET
				//var rect:Rectangle = new Rectangle(0, 0, w, h);
				//var pt:Point = new Point(0, 0);
				
				//snapshotMove.draw(prevBitmap.bitmapData, new Matrix(), new ColorTransform(), 'subtract');
				//snapshotMove.threshold(snapshotMove, rect, pt, '>', 0xff111111, 0xffffffff);
				
				//END OF CODE INTERNET
				var snapshotBitmap:Bitmap = new Bitmap(snapshot);
				bit1.mask = snapshotBitmap;
				t = (new Date()).getMilliseconds() - t;
				if (t < 0)
					t += 1000;
				time = t;
			}
			private function clickButton() : void
			{
				tailleRef = taille;
			}
			
			private function processImage(img:BitmapData) : Point
			{
				var algo:Algorithme.algorithme;
				if (check_algo.selected)
					algo = Algorithme.algorithme(algos[1]);
				else
					algo = Algorithme.algorithme(algos[0]);
				if (algo == null)
					Alert.show("null valu algo");
				algo.r_min = r_min.value;
				algo.r_max = r_max.value;
				algo.g_min = g_min.value;
				algo.g_max = g_max.value;
				algo.b_min = b_min.value;
				algo.b_max = b_max.value;
				var res:Point = algo.ProcessImage(img);
				taille = algo.taille;
				return res;
			}
			
			
			// ----------------------------------  DRAG N DROP PART  -----------------------------------------------------
			
			//Import classes so you don't have to use full names.
			import mx.managers.DragManager;
			import mx.core.DragSource;
			import mx.events.DragEvent;
			import flash.events.MouseEvent;
			
			// Embed icon image.
			[Embed(source='assets/postit.png')]
			public var postItImage:Class;
			
			// The mouseMove event handler for the Image control
			// initiates the drag-and-drop operation.
			private function mouseMoveHandler(event:MouseEvent):void 
			{                
				var dragInitiator:Image = Image(event.currentTarget);
				var ds:DragSource = new DragSource();
				ds.addData(dragInitiator, "img");               
				
				DragManager.doDrag(dragInitiator, ds, event);
			}
			
			// The dragEnter event handler for the Canvas container
			// enables dropping.
			private function dragEnterHandler(event:DragEvent):void {
				if (event.dragSource.hasFormat("img"))
				{
					DragManager.acceptDragDrop(Canvas(event.currentTarget));
				}
			}
			
			// The dragDrop event handler for the Canvas container
			// sets the Image control's position by 
			// "dropping" it in its new location.
			private function dragDropHandler(event:DragEvent):void {
				Image(event.dragInitiator).x = 
					Canvas(event.currentTarget).mouseX;
				Image(event.dragInitiator).y = 
					Canvas(event.currentTarget).mouseY;
			}
			
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	<s:HGroup height="100%" width="100%">
		<s:VGroup width="100%">
			<s:HGroup>
				<s:VGroup width="100%" height="100%">
					<s:Label text="RED"/>
					<s:HSlider id="r_min" minimum="0" maximum="255" liveDragging="true" value="0"/>
					<s:HSlider id="r_max" minimum="0" maximum="255" liveDragging="true" value="58"/>
					<!-- 0 to 58 -->
				</s:VGroup>
				<s:VGroup width="100%" height="100%">
					<s:Label text="GREEN"/>
					<s:HSlider id="g_min" minimum="0" maximum="255" liveDragging="true" value="52"/>
					<s:HSlider id="g_max" minimum="0" maximum="255" liveDragging="true" value="164"/>
					<!-- 52 to 164 -->
				</s:VGroup>
				<s:VGroup width="100%" height="100%">
					<s:Label text="BLUE"/>
					<s:HSlider id="b_min" minimum="0" maximum="255" liveDragging="true" value="150"/>
					<s:HSlider id="b_max" minimum="0" maximum="255" liveDragging="true" value="255"/>
					<!-- 150 to 256 -->
				</s:VGroup>
			</s:HGroup>
			<s:HGroup width="100%">
				<s:Panel title="Votre webcam" visible="false" width="0" height="0">
					<mx:VideoDisplay
						id="videoCamera"
						creationComplete="loadCamera();"
						width="{w}"
						height="{h}"/>
				</s:Panel>
				<s:VGroup>
					<s:HGroup width="100%" height="100%">
						<s:Button
							id="buttonBegin"
							label="Commencer"
							click="clickButton();"
							/>
						
						<s:Label text="Coefficient de clique"/>
						<s:HSlider id="coef" minimum="1" maximum="30" liveDragging="true" value="13"/>
						<s:Label text="Profondeur: {taille}"/>
						<s:Label text="Temps: {time}"/>
					</s:HGroup>
					<s:HGroup>
						<s:CheckBox
							id="check_swap"
							label="swap"
							selected="true"
							/>
						<s:CheckBox
							id="check_no_algo"
							label="pas d'algorithme"
							/>
						<s:CheckBox
							selected="true"
							id="check_algo"
							label="algo par group"
							/>
						<s:CheckBox
							id="check_algo_plus"
							label="algo complémentaire"
							/>
						<s:HSlider id="stabilizer" minimum="1" maximum="20" liveDragging="true" value="4"/>
					</s:HGroup>
				</s:VGroup>
			</s:HGroup>
			<s:Panel title="Detection de la couleur" visible="true" >
				<s:BitmapImage
					id="bit1"
					height="{h}"/>
			</s:Panel>
		</s:VGroup>
		<!-- The Canvas is the drag target --> 
		<mx:Canvas id="v1"
				   width="700" height="600"  
				   borderStyle="solid" 
				   backgroundColor="#FFFE11"
				   dragEnter="dragEnterHandler(event);" 
				   dragDrop="dragDropHandler(event);">
			
			<!-- The image is the drag initiator. -->
			<mx:Image id="myimgBad" 
					  source="@Embed(source='assets/raphiBad.png')" 
					  mouseMove="mouseMoveHandler(event);"/>
			<mx:Image id="myimgHappy" 
					  source="@Embed(source='assets/raphiHappy.png')" 
					  mouseMove="mouseMoveHandler(event);"
					  visible="false" /> 
			<mx:Image id="myviseur" 
					  source="@Embed(source='assets/viseur.png')" 
					  mouseMove="mouseMoveHandler(event);"/> 
		</mx:Canvas>
	</s:HGroup>
	
</s:Application>
