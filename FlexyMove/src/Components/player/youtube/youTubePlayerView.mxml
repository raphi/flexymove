<?xml version="1.0" encoding="utf-8"?>
<s:Group  xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:components="Components.player.youtube.components.*"
		  rollOver="onRollOverPlayer(event)"
		  rollOut="onRollOutPlayer(event)"
		  width="730" height="498" xmlns:youtube="Components.player.youtube.*">

	
	<fx:Style>
		#PlayerControlVideo 
		{
			background-image: Embed("/assets/images/Controle.png");
		}
	</fx:Style>
	
	<fx:Metadata>
		[Event("change", type="mx.events.Event")]
	</fx:Metadata>
	
	<fx:Declarations>
		<s:Fade id="showEffect" alphaTo="1" duration="1000" targets="{PlayerControlVideo}"/>
		<s:Fade id="hideEffect" alphaTo="0" duration="1000" targets="{PlayerControlVideo}"/>
	</fx:Declarations>
	
	
	<fx:Script>
		<![CDATA[
			import Components.player.youtube.components.YouTubeError;
			import Components.player.youtube.components.YouTubeEvent;
			import Components.player.youtube.components.YouTubePlayingState;
			import Components.player.youtube.components.YouTubeVideoQuality;
			
			import com.degrafa.geometry.Geometry;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			
			import spark.skins.spark.windowChrome.CloseButtonSkin;
			
			[Bindable]
			private var trackingActions:ArrayCollection = new ArrayCollection(new Array());
			public var idYoutubeVideo : String = "";
			
			//----------------------------------
			//  YouTube Event Handling
			//----------------------------------
			private function handlePlayerLoaded(event:YouTubeEvent):void
			{
				trackingActions.addItem({label:"YouTube Playinger API loaded"});
				youTubePlayer.cueVideoById(idYoutubeVideo,0,YouTubeVideoQuality.DEFAULT);
			}
			
			private function handlePlayingState(event:YouTubeEvent):void
			{
				var message:String = "";
				switch(event.playerState)
				{
					case YouTubePlayingState.BUFFERING:
						message = "Video is Buffering";
						break;
					case YouTubePlayingState.UNSTARTED:
						message = "Player is unstarted";
						break;
					case YouTubePlayingState.PLAYING:
						message = "Video is playing";
						break;
					case YouTubePlayingState.PAUSE:
						message = "Video pause is active";
						break;
					case YouTubePlayingState.VIDEO_CUED:
						message = "Video is cued - Playing new Video?!"
						break;
					case YouTubePlayingState.VIDEO_ENDED:
						message = "Video is finished";
						break;
					
					default:
						message = "uh what happens?? " + event.playerState;
						break;
				}
				
				trackingActions.addItem({label:"YouTube PlayingState: " + message});
			}
			
			private function handleVideoQuality(event:YouTubeEvent):void
			{
				var message:String = "";
				switch(event.playbackQuality)
				{
					case YouTubeVideoQuality.DEFAULT:
						message = "default - YouTube choose";
						break;
					case YouTubeVideoQuality.SMALL:
						message = "SMALL - less than 640px by 360px";
						break;
					case YouTubeVideoQuality.MEDIUM:
						message = "MEDIUM - 640px by 360px";
						break;
					case YouTubeVideoQuality.LARGE:
						message = "LARGE - 854px by 480px";
						break;
					case YouTubeVideoQuality.HD720:
						message = "HD - 1280px by 720px"
						break;
					
					default:
						message = "uh what happens?? " + event.playbackQuality;
						break;
				}
				trackingActions.addItem({label:"Video Quality changed: " + message});
			}
			
			private function handleYouTubeError(event:YouTubeEvent):void
			{
				var message:String = "";
				
				switch(event.errorCode)
				{
					case YouTubeError.VIDEO_NOT_FOUND:
						message = "Video not found: " + event.errorCode;
						break;
					case YouTubeError.VIDEO_NOT_ALLOWED:
						message = "Video not allowed: " + event.errorCode;
						break;
					case YouTubeError.EMBEDDING_NOT_ALLOWED:
						message = "Embedding not allowed: " + event.errorCode;
						break;
					
					default:
						message = "undefined Error:" + event.errorCode;
						break;
				}
				
				Alert.show(message, "YouTube Error", Alert.OK);
				trackingActions.addItem({label:"Video Error: " + message});
			}
			
			//----------------------------------
			//  YouTube Player Control
			//----------------------------------
			private function handlePlay(event:MouseEvent):void
			{
				// FIXME CHANGE THAT

				if (PlayBouton.styleName == "Pause")
				{
					PlayBouton.styleName = "Play";
					PlayBouton.source="/assets/images/Play_icon.png"
					handlePause(event);
					return;
				}
				PlayBouton.styleName = "Pause";
				PlayBouton.source="/assets/images/Pause_icon.png"
				youTubePlayer.playVideo();
				this.addEventListener(Event.ENTER_FRAME, handlePlayingTime);
			}
			
			
			/*save Parameter*/
			private var saveX :int = 0;
			private var saveY :int = 0;
			private var saveHeight :int = 0;
			private var saveWidth :int = 0;
			private function fullScreen(event:MouseEvent):void
			{
				
				//Fix Probleme With Controle BAr
				if( youTubePlayer.stage.displayState == StageDisplayState.NORMAL )
				{
					// set full screen display
					this.stage.displayState = StageDisplayState.FULL_SCREEN;
					saveX = this.parent.x;
					saveY = this.parent.y;
					saveHeight  = youTubePlayer.height;
					saveWidth = youTubePlayer.width;
					youTubePlayer.height = Capabilities.screenResolutionY;
					youTubePlayer.width= Capabilities.screenResolutionX; 
					this.parent.x = 0;
					this.parent.y = 0;
					FullScreen.source =  "/assets/images/nofullscreen_icon.png"
				}
				else
				{
					// set normal display
					this.stage.displayState = StageDisplayState.NORMAL;
					youTubePlayer.height = saveHeight;
					youTubePlayer.width= saveWidth; 
					this.parent.x = saveX;
					this.parent.y = saveY;
					FullScreen.source =  "/assets/images/fullscreen_icon.png"
				}

			}
			
			private function  onSeekToClick(event: MouseEvent) : void
			{
				var pos : Number = event.localX ;//- progresPlayingVideo.stage.x ;
				pos = (pos * 100 ) / Progress.insetRect.width;
				
				pos = youTubePlayer.getDuration() * pos / 100;
				youTubePlayer.seekTo(pos);
				
				Progress.setProgressPlaying(youTubePlayer.getCurrentTime(),youTubePlayer.getDuration());
				
			}
			
			private function handlePause(event:MouseEvent):void
			{
				youTubePlayer.pauseVideo();
				this.removeEventListener(Event.ENTER_FRAME, handlePlayingTime);
			}
			
			private function handleStop(event:MouseEvent):void
			{
				youTubePlayer.stopVideo();
				this.removeEventListener(Event.ENTER_FRAME, handlePlayingTime);
				
			}
			
			/* 			private function handleComboQuality(event:Event):void
			{
			youTubePlayer.playbackQuality =  String(ComboBox(event.target).selectedItem);
			} */
			
			private function handlePlayingTime(e:Event):void
			{
				var currenttimeMn : int = youTubePlayer.getCurrentTime() / 60;
				var currenttimeS : int =  youTubePlayer.getCurrentTime() - currenttimeMn * 60;
				var currenttime : String = ((currenttimeMn <10 ) ? "0" + currenttimeMn : currenttimeMn) + ":" +
					((currenttimeS <10 ) ? "0" + currenttimeS : currenttimeS );
				
				var durationMn : int = youTubePlayer.getDuration() / 60;
				var durationS : int =  youTubePlayer.getDuration() - durationMn * 60;
				var duration : String = ((durationMn <10 ) ? "0" + durationMn : durationMn) + ":" +
					((durationS <10 ) ? "0" + durationS : durationS );
				
				
				labelTime.text = currenttime + " / " + duration;
				
				/* progresPlayingVideo.minimum = 0;
				progresPlayingVideo.maximum = youTubePlayer.getDuration();
				progresPlayingVideo.setProgress(youTubePlayer.getCurrentTime(),youTubePlayer.getDuration());
				
			 */	Progress.setProgressPlaying(youTubePlayer.getCurrentTime(),youTubePlayer.getDuration());
				
				/* progressLoadVideo.minimum = 0;
				progressLoadVideo.maximum = youTubePlayer.getVideoBytesTotal();
				progressLoadVideo.setProgress(youTubePlayer.getVideoBytesLoaded(),youTubePlayer.getVideoBytesTotal());
		 */		Progress.setProgressBuffering(youTubePlayer.getVideoBytesLoaded(),youTubePlayer.getVideoBytesTotal());
				
			}
			
			// FIXME bug because the player doesnt send rollover and rollout events
			private function onRollOverPlayer(event:MouseEvent):void
			{
				//showEffect.play();
			}
			
			// FIXME bug because the player doesnt send rollover and rollout events
			private function onRollOutPlayer(event:MouseEvent):void
			{
				//hideEffect.play();
			}
			
			private function onCloseButton(event:MouseEvent):void
			{
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
		]]>
	</fx:Script>
	
	<components:AirYouTube id="youTubePlayer" width="100%" height="100%"
						   volume="{sliderVolume.value}"
						   youtubeError="{handleYouTubeError(event);}"
						   youtubePlayerLoaded="{handlePlayerLoaded(event);}"
						   youtubeStatus="{handlePlayingState(event);}"
						   youtubeVideoQuality="{handleVideoQuality(event);}"/>
	
	<!--rollOver="fullScreen(event)"-->
	<s:BorderContainer id="PlayerControlVideo" 

					   bottom="0" width="100%" height="25">
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle"/>
		</s:layout>

		
		<mx:VBox dropShadowVisible="false" width="100%">
			<mx:HBox width="100%">
				<!--	<mx:Button label="Stop" click="{fullScreen(event);}"/>-->
				
				<mx:Box paddingTop="3" paddingLeft="10">
					<s:Image  id="PlayBouton" click="{handlePlay(event);}" 
							  source="@Embed('/assets/images/Play_icon.png')" styleName="Play"/>
				</mx:Box>
				
				<mx:Label id="labelTime"  width="80" paddingTop="2" color="white"/>
				
				<mx:HSlider  id="sliderVolume" width="50" minimum="0" maximum="100" value="0" liveDragging="true" />
				
				<mx:HBox paddingTop="7" width="100%" paddingRight="5">
				<!--	<mx:ProgressBar chromeColor="#1E6774" id="progresPlayingVideo" label="" mode="manual" height="5" width="100%" click="onSeekToClick(event)" />
					<mx:ProgressBar  id="progressLoadVideo"  label="loading bar" mode="manual" labelPlacement="center" />
			-->	<youtube:ProgressComponent id="Progress" click="onSeekToClick(event)"/>
				</mx:HBox>
				
				<mx:Box paddingTop="3" paddingRight="15">
					<s:Image  id="FullScreen" click="{fullScreen(event);}" 
							  source="@Embed('/assets/images/fullscreen_icon.png')"/>
				</mx:Box>
				
			
			</mx:HBox>	
		</mx:VBox>
		
	</s:BorderContainer>
	<s:Image x="10" y="10" width="25" height="25" 
			 source="@Embed('/assets/images/closeIcon2.png')"
			 buttonMode="true"
			 click="onCloseButton(event)"/>
</s:Group>

